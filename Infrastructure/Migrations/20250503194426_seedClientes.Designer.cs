// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PeloterosDbContext))]
    [Migration("20250503194426_seedClientes")]
    partial class seedClientes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Entities.Bloqueo", b =>
                {
                    b.Property<Guid>("BloqueoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bloqueo_id");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<TimeOnly>("HoraFin")
                        .HasColumnType("time")
                        .HasColumnName("hora_fin");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time")
                        .HasColumnName("hora_inicio");

                    b.Property<string>("Motivo")
                        .HasColumnType("text")
                        .HasColumnName("motivo");

                    b.Property<Guid>("RecursoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recurso_id");

                    b.HasKey("BloqueoId")
                        .HasName("PK__Bloqueos__23A6D9CE349ADE33");

                    b.HasIndex("RecursoId");

                    b.HasIndex(new[] { "Fecha" }, "idx_bloqueos_fecha");

                    b.ToTable("Bloqueos");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cliente_id");

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellido");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateOnly>("FechaRegistro")
                        .HasColumnType("date")
                        .HasColumnName("fecha_registro");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("ClienteId")
                        .HasName("PK__Clientes__47E34D6463C3D9ED");

                    b.HasIndex(new[] { "Email" }, "UQ__Clientes__AB6E616474DE82F3")
                        .IsUnique();

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            ClienteId = new Guid("04bc1990-5e8d-4237-a9e4-8e5b8ba56237"),
                            Activo = true,
                            Apellido = "Pérez",
                            Email = "juanperez@gmail.com",
                            FechaRegistro = new DateOnly(2025, 5, 10),
                            Nombre = "Juan",
                            Telefono = "123456789"
                        },
                        new
                        {
                            ClienteId = new Guid("07bc1770-5e8d-4237-a9e4-8e6b8ba56237"),
                            Activo = true,
                            Apellido = "Gómez",
                            Email = "maria@gmail.com",
                            FechaRegistro = new DateOnly(2025, 5, 1),
                            Nombre = "María",
                            Telefono = "987654321"
                        },
                        new
                        {
                            ClienteId = new Guid("04bc1990-5e8d-4237-a9e4-6e6b8ba76237"),
                            Activo = true,
                            Apellido = "López",
                            Email = "pedro@gmail.com",
                            FechaRegistro = new DateOnly(2025, 5, 3),
                            Nombre = "Pedro",
                            Telefono = "456789123"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.HorariosDisponibilidad", b =>
                {
                    b.Property<Guid>("HorariosDisponibilidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("horario_id");

                    b.Property<string>("DiaSemana")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dia_semana");

                    b.Property<TimeOnly>("HoraApertura")
                        .HasColumnType("time")
                        .HasColumnName("hora_apertura");

                    b.Property<TimeOnly>("HoraCierre")
                        .HasColumnType("time")
                        .HasColumnName("hora_cierre");

                    b.Property<Guid>("RecursoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recurso_id");

                    b.HasKey("HorariosDisponibilidadId")
                        .HasName("PK__Horarios__5A3872289CFC8D99");

                    b.HasIndex("RecursoId");

                    b.ToTable("HorariosDisponibilidad", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Dominio.Entities.Pago", b =>
                {
                    b.Property<Guid>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pago_id");

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("estado");

                    b.Property<byte[]>("FechaPago")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("fecha_pago");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("metodo_pago");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("monto");

                    b.Property<string>("TransaccionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaccion_id");

                    b.Property<Guid>("TurnoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("turno_id");

                    b.HasKey("PagoId")
                        .HasName("PK__Pagos__FFF0A58EA84C92A1");

                    b.HasIndex("TurnoId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Dominio.Entities.Recurso", b =>
                {
                    b.Property<Guid>("RecursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recurso_id");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<int?>("Capacidad")
                        .HasColumnType("int")
                        .HasColumnName("capacidad");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("PrecioHora")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("precio_hora");

                    b.HasKey("RecursoId")
                        .HasName("PK__Recursos__054F2526F67C96EA");

                    b.ToTable("Recursos");

                    b.HasData(
                        new
                        {
                            RecursoId = new Guid("07bc1990-5e8d-4237-a9e4-8e6b8ba56537"),
                            Activo = true,
                            Capacidad = 80,
                            Descripcion = "Descripcion del recurso 1",
                            Nombre = "Jungla",
                            PrecioHora = 8000m
                        },
                        new
                        {
                            RecursoId = new Guid("07bc1990-5e8d-4237-a9e4-8e6b8ba88237"),
                            Activo = true,
                            Capacidad = 60,
                            Descripcion = "Descripcion del recurso 2",
                            Nombre = "Jump",
                            PrecioHora = 10000m
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Turno", b =>
                {
                    b.Property<Guid>("TurnoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("turno_id");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cliente_id");

                    b.Property<string>("Estado")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("estado");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<byte[]>("FechaReserva")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("fecha_reserva");

                    b.Property<TimeOnly>("HoraFin")
                        .HasColumnType("time")
                        .HasColumnName("hora_fin");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time")
                        .HasColumnName("hora_inicio");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("monto_total");

                    b.Property<string>("Notas")
                        .HasColumnType("text")
                        .HasColumnName("notas");

                    b.Property<Guid>("RecursoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recurso_id");

                    b.HasKey("TurnoId")
                        .HasName("PK__Turnos__8E611ADF24DACE81");

                    b.HasIndex(new[] { "ClienteId" }, "idx_turnos_cliente");

                    b.HasIndex(new[] { "Fecha", "HoraInicio", "HoraFin" }, "idx_turnos_fecha_hora");

                    b.HasIndex(new[] { "RecursoId" }, "idx_turnos_recurso");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "07bc1340-5e8d-4237-a9e4-8e6b8ba56237",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "078a1ad8e-302a-4e75-a156-f997bb40d131",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "596fd05b-7d8c-4c8d-aef1-c50dae89977a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Bloqueo", b =>
                {
                    b.HasOne("Dominio.Entities.Recurso", "Recurso")
                        .WithMany("Bloqueos")
                        .HasForeignKey("RecursoId")
                        .IsRequired()
                        .HasConstraintName("FK__Bloqueos__recurs__4AB81AF0");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("Dominio.Entities.HorariosDisponibilidad", b =>
                {
                    b.HasOne("Dominio.Entities.Recurso", "Recurso")
                        .WithMany("HorariosDisponibilidads")
                        .HasForeignKey("RecursoId")
                        .IsRequired()
                        .HasConstraintName("FK__HorariosD__recur__47DBAE45");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("Dominio.Entities.Pago", b =>
                {
                    b.HasOne("Dominio.Entities.Turno", "Turno")
                        .WithMany("Pagos")
                        .HasForeignKey("TurnoId")
                        .IsRequired()
                        .HasConstraintName("FK__Pagos__turno_id__440B1D61");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("Dominio.Entities.Turno", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("Turnos")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK__Turnos__cliente___3F466844");

                    b.HasOne("Dominio.Entities.Recurso", "Recurso")
                        .WithMany("Turnos")
                        .HasForeignKey("RecursoId")
                        .IsRequired()
                        .HasConstraintName("FK__Turnos__recurso___403A8C7D");

                    b.Navigation("Cliente");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Dominio.Entities.Recurso", b =>
                {
                    b.Navigation("Bloqueos");

                    b.Navigation("HorariosDisponibilidads");

                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Dominio.Entities.Turno", b =>
                {
                    b.Navigation("Pagos");
                });
#pragma warning restore 612, 618
        }
    }
}
